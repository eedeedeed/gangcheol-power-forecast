import React, { useState, useEffect, useContext } from 'react';
import { BuildingContext } from '../../contexts/BuildingContext';
import { getCurrentWeather } from '../../api/dashboard.api';

// PTY ÏΩîÎìúÏóê Îî∞Î•∏ ÎÇ†Ïî® ÏïÑÏù¥ÏΩòÍ≥º ÌïúÍ∏Ä ÏÑ§Î™ÖÏùÑ Î∞òÌôòÌïòÎäî Ìó¨Ìçº Ìï®Ïàò
const getWeatherDisplayData = (ptyCode) => {
  const ptyMap = {
    '0': { condition: 'clear', description: 'ÎßëÏùå', icon: '‚òÄÔ∏è' },
    '1': { condition: 'rain', description: 'ÎπÑ', icon: 'üåßÔ∏è' },
    '2': { condition: 'rain_snow', description: 'ÎπÑ/Îàà', icon: 'üå¶Ô∏è' },
    '3': { condition: 'snow', description: 'Îàà', icon: '‚ùÑÔ∏è' },
    '5': { condition: 'drizzle', description: 'ÎπóÎ∞©Ïö∏', icon: 'üíß' },
    '6': { condition: 'drizzle_snow', description: 'ÎπóÎ∞©Ïö∏/ÎààÎÇ†Î¶º', icon: 'üíß‚ùÑÔ∏è' },
    '7': { condition: 'snow_flying', description: 'ÎààÎÇ†Î¶º', icon: 'üå®Ô∏è' },
  };
  return ptyMap[ptyCode] || { condition: 'unknown', description: 'Ï†ïÎ≥¥ ÏóÜÏùå', icon: 'üå§Ô∏è' };
};

// ÏïÑÏù¥ÏΩò Ïª¥Ìè¨ÎÑåÌä∏
const WeatherIcon = ({ icon, size = 48 }) => {
    return <span style={{ fontSize: `${size}px`, lineHeight: 1 }}>{icon}</span>;
};

// ÏÉàÎ°úÍ≥†Ïπ® ÏïÑÏù¥ÏΩò SVG Ïª¥Ìè¨ÎÑåÌä∏
const RefreshIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2.5" strokeLinecap="round" strokeLinejoin="round">
    <path d="M23 4v6h-6" />
    <path d="M20.49 15a9 9 0 1 1-2.12-9.36L23 10" />
  </svg>
);

function WeatherCard() {
    const { selectedBuilding } = useContext(BuildingContext);
    const [weather, setWeather] = useState({
        temperature: '--',
        humidity: '--',
        windSpeed: '--',
        description: 'Ï†ïÎ≥¥ ÏóÜÏùå',
        icon: 'üå§Ô∏è',
        location: 'ÎÇ†Ïî® Ï†ïÎ≥¥ Î°úÎî© Ï§ë...',
    });
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    const fetchWeatherByLocation = async (lat, lng) => {
        try {
            setLoading(true);
            setError(null);
            const response = await getCurrentWeather({ lat, lng });
            console.log('APIÎ°úÎ∂ÄÌÑ∞ Î∞õÏùÄ ÎÇ†Ïî® Îç∞Ïù¥ÌÑ∞:', response.data);
            
            const weatherData = response.data.weather;
            const displayData = getWeatherDisplayData(weatherData.PTY);
            const locationName = response.data.address || 'ÌòÑÏû¨ ÏúÑÏπòÏ£ºÏÜåÎ•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.';
            

            setWeather({
                temperature: weatherData.T1H,
                humidity: weatherData.REH,
                windSpeed: weatherData.WSD,
                description: displayData.description,
                icon: displayData.icon,
                location: locationName,
            });
        } catch (err) {
            console.error('ÏúÑÏπò Í∏∞Î∞ò ÎÇ†Ïî® API Ïò§Î•ò:', err);
            setError('ÎÇ†Ïî® Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
        } finally {
            setLoading(false);
        }
    };
    
    const handleRefresh = () => {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                (position) => fetchWeatherByLocation(position.coords.latitude, position.coords.longitude),
                (err) => {
                    console.error('Geolocation Ïò§Î•ò:', err);
                    setError('ÏúÑÏπò Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.');
                    setLoading(false);
                }
            );
        } else {
            setError('Î∏åÎùºÏö∞Ï†ÄÍ∞Ä ÏúÑÏπò Ï†ïÎ≥¥Î•º ÏßÄÏõêÌïòÏßÄ ÏïäÏäµÎãàÎã§.');
            setLoading(false);
        }
    };

    useEffect(() => {
        handleRefresh(); 
    }, [selectedBuilding]);


    return (
        <div className="weather-card-large">
            <div className="weather-header">
                <h3>Ïã§ÏãúÍ∞Ñ ÎÇ†Ïî®</h3>
                <button className="weather-refresh-btn" onClick={handleRefresh} disabled={loading} aria-label="ÎÇ†Ïî® ÏÉàÎ°úÍ≥†Ïπ®">
                    <RefreshIcon />
                </button>
            </div>
            <div className="weather-body">
                {loading ? (
                    <div className="weather-loading"><div className="loading-spinner"></div><p>ÎÇ†Ïî® Ï†ïÎ≥¥ Î°úÎî© Ï§ë...</p></div>
                ) : error ? (
                    <div className="weather-error"><p>{error}</p></div>
                ) : (
                    <div className="weather-content">
                        <div className="weather-main">
                            <div className="weather-icon"><WeatherIcon icon={weather.icon} size={64} /></div>
                            <div className="weather-temp">
                                <span className="temp-value">{weather.temperature}</span>
                                <span className="temp-unit">¬∞C</span>
                            </div>
                        </div>
                        <div className="weather-info">
                            <div className="weather-location">{weather.location}</div>
                            <div className="weather-description">{weather.description}</div>
                        </div>
                        <div className="weather-details">
                            <div className="detail-item">
                                <span className="detail-label">ÏäµÎèÑ</span>
                                <span className="detail-value">{weather.humidity}%</span>
                            </div>
                            <div className="detail-item">
                                <span className="detail-label">ÌíçÏÜç</span>
                                <span className="detail-value">{weather.windSpeed}m/s</span>
                            </div>
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
}

export default WeatherCard;
